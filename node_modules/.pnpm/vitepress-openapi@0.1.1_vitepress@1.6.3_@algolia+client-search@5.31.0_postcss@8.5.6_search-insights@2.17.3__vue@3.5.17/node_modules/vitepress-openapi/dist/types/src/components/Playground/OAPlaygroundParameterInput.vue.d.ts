declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    parameter: {
        type: ObjectConstructor;
        required: true;
    };
    modelValue: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor | NumberConstructor | BooleanConstructor | null)[];
        required: true;
    };
    compositeKey: {
        type: StringConstructor;
        required: true;
    };
    enabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    submit: (...args: any[]) => void;
    "update:enabled": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    parameter: {
        type: ObjectConstructor;
        required: true;
    };
    modelValue: {
        type: (ObjectConstructor | StringConstructor | ArrayConstructor | NumberConstructor | BooleanConstructor | null)[];
        required: true;
    };
    compositeKey: {
        type: StringConstructor;
        required: true;
    };
    enabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSubmit?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
}>, {
    enabled: boolean;
    hideLabel: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
