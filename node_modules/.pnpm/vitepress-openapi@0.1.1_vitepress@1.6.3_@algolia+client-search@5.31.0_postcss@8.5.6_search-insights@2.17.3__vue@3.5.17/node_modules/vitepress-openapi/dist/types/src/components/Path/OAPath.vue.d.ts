declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & (new () => {
    $slots: S;
});
declare const __VLS_component: import("vue").DefineComponent<{}, {
    openapi: Record<string, any>;
    operation: Record<string, any>;
    id: string;
    $props: {
        readonly openapi?: Record<string, any> | undefined;
        readonly operation?: Record<string, any> | undefined;
        readonly id?: string | undefined;
    };
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
type __VLS_Slots = {
    header?: ((props: {
        operation: Record<string, any>;
        method: any;
        path: any;
        deprecated: any;
    }) => any) | undefined;
} & {
    tags?: ((props: {
        operation: Record<string, any>;
        method: any;
        path: any;
        tags: any;
    }) => any) | undefined;
} & {
    path?: ((props: {
        operationId: string;
        operation: Record<string, any>;
        method: any;
        path: any;
        hideBaseUrl: boolean;
        deprecated: any;
        servers: any;
        baseUrl: string;
    }) => any) | undefined;
} & {
    description?: ((props: {
        operation: Record<string, any>;
        method: any;
        path: any;
    }) => any) | undefined;
} & {
    security?: ((props: {
        operation: Record<string, any>;
        method: any;
        path: any;
        securityUi: SecurityUi;
        selectedSchemeId: string;
    }) => any) | undefined;
} & {
    parameters?: ((props: {
        operationId: string;
        parameters: any;
    }) => any) | undefined;
} & {
    'request-body'?: ((props: {
        operationId: string;
        requestBody: any;
    }) => any) | undefined;
} & {
    responses?: ((props: {
        operationId: string;
        responses: any;
    }) => any) | undefined;
} & {
    path?: ((props: {
        operationId: string;
        operation: Record<string, any>;
        method: any;
        path: any;
        hideBaseUrl: boolean;
        deprecated: any;
        servers: any;
        baseUrl: string;
    }) => any) | undefined;
} & {
    playground?: ((props: {
        operationId: string;
        path: any;
        method: any;
        parameters: any;
        requestBody: any;
        securityUi: SecurityUi;
        servers: any;
    }) => any) | undefined;
} & {
    'code-samples'?: ((props: {
        operationId: string;
        operation: Record<string, any>;
        method: any;
        path: any;
        codeSamples: any;
    }) => any) | undefined;
} & {
    branding?: ((props: {
        operationId: string;
        operation: Record<string, any>;
        method: any;
        path: any;
    }) => any) | undefined;
} & {
    footer?: ((props: {
        operationId: string;
        operation: Record<string, any>;
        method: any;
        path: any;
    }) => any) | undefined;
};
