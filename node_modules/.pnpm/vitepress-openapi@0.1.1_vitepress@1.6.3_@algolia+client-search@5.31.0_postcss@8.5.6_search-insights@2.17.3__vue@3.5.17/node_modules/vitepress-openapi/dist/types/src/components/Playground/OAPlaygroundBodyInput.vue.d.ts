import type { OpenAPIV3 } from '@scalar/openapi-types';
import type { OAExampleObject } from '../../types';
interface Props {
    operationId: string;
    body: any;
    contentType: string;
    requestBody?: OpenAPIV3.RequestBodyObject;
    enabledParameters: Record<string, boolean>;
    examples?: {
        [key: string]: OAExampleObject;
    };
}
declare const _default: import("vue").DefineComponent<Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    submit: () => any;
    "update:enabled": (key: string, value: boolean) => any;
    "update:body": (value: any) => any;
}, string, import("vue").PublicProps, Readonly<Props> & Readonly<{
    onSubmit?: (() => any) | undefined;
    "onUpdate:enabled"?: ((key: string, value: boolean) => any) | undefined;
    "onUpdate:body"?: ((value: any) => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export default _default;
