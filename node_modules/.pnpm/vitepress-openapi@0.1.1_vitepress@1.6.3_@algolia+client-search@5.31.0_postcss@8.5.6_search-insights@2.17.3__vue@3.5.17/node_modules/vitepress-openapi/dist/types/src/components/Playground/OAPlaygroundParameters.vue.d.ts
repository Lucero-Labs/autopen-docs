import type { OpenAPIV3 } from '@scalar/openapi-types';
import type { SecurityUiItem } from '../../types';
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    operationId: {
        type: StringConstructor;
        required: true;
    };
    path: {
        type: StringConstructor;
        required: true;
    };
    method: {
        type: StringConstructor;
        required: true;
    };
    servers: {
        type: ArrayConstructor;
        default: () => never[];
    };
    parameters: {
        type: {
            (arrayLength: number): OpenAPIV3.ParameterObject[];
            (...items: OpenAPIV3.ParameterObject[]): OpenAPIV3.ParameterObject[];
            new (arrayLength: number): OpenAPIV3.ParameterObject[];
            new (...items: OpenAPIV3.ParameterObject[]): OpenAPIV3.ParameterObject[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
            from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];
            from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
            of<T>(...items: T[]): T[];
            fromAsync<T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>;
            fromAsync<T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>;
            readonly [Symbol.species]: ArrayConstructor;
        };
        required: false;
        default: () => never[];
    };
    securityUi: {
        type: ObjectConstructor;
        required: false;
        default: () => SecurityUiItem[];
    };
    examples: {
        type: ObjectConstructor;
        required: false;
    };
    requestBody: {
        type: ObjectConstructor;
        required: false;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    submit: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    operationId: {
        type: StringConstructor;
        required: true;
    };
    path: {
        type: StringConstructor;
        required: true;
    };
    method: {
        type: StringConstructor;
        required: true;
    };
    servers: {
        type: ArrayConstructor;
        default: () => never[];
    };
    parameters: {
        type: {
            (arrayLength: number): OpenAPIV3.ParameterObject[];
            (...items: OpenAPIV3.ParameterObject[]): OpenAPIV3.ParameterObject[];
            new (arrayLength: number): OpenAPIV3.ParameterObject[];
            new (...items: OpenAPIV3.ParameterObject[]): OpenAPIV3.ParameterObject[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
            from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];
            from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];
            of<T>(...items: T[]): T[];
            fromAsync<T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>;
            fromAsync<T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>;
            readonly [Symbol.species]: ArrayConstructor;
        };
        required: false;
        default: () => never[];
    };
    securityUi: {
        type: ObjectConstructor;
        required: false;
        default: () => SecurityUiItem[];
    };
    examples: {
        type: ObjectConstructor;
        required: false;
    };
    requestBody: {
        type: ObjectConstructor;
        required: false;
    };
}>> & Readonly<{
    onSubmit?: ((...args: any[]) => any) | undefined;
}>, {
    parameters: OpenAPIV3.ParameterObject[];
    servers: unknown[];
    securityUi: Record<string, any>;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
