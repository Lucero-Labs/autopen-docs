import type { OpenAPIV3 } from '@scalar/openapi-types';
import type { OpenAPIDocument, ParsedOpenAPI, ParsedPaths } from '../types';
export declare function OpenApi({ spec, originalSpec, }?: {
    spec: ParsedOpenAPI | OpenAPIDocument | null;
    originalSpec?: OpenAPIDocument | null;
}): {
    spec: OpenAPIDocument;
    originalSpec: OpenAPIDocument | null;
    setSpec: (spec: any) => void;
    getSpec: () => OpenAPIDocument;
    getOriginalSpec: () => OpenAPIDocument | null;
    setOriginalSpec: (spec: OpenAPIDocument | null) => void;
    getOperation: (operationId: string) => OpenAPIV3.OperationObject<{}> | null;
    getOperationPath: (operationId: string) => string | null;
    getOperationMethod: (operationId: string) => OpenAPIV3.HttpMethods | null;
    getOperationParameters: (operationId: string) => (OpenAPIV3.ReferenceObject | OpenAPIV3.ParameterObject)[];
    getPaths: () => ParsedPaths;
    getPathsByVerbs: () => ({
        path: string;
        verb: string;
        operationId: any;
        summary: any;
        tags: any;
    } | null)[];
    getInfo: () => OpenAPIV3.InfoObject & Omit<OpenAPIV3.InfoObject, "license" | "summary"> & {
        summary?: string;
        license?: import("@scalar/openapi-types").OpenAPIV3_1.LicenseObject;
    };
    getExternalDocs: () => OpenAPIV3.ExternalDocumentationObject;
    getServers: () => OpenAPIV3.ServerObject[] & import("@scalar/openapi-types").OpenAPIV3_1.ServerObject[];
    getOperationServers: (operationId: string) => OpenAPIV3.ServerObject[];
    getOperationsTags: () => string[];
    getPathsByTags: (tags: string | string[]) => OpenAPIV3.PathsObject<{}, {}>;
    getPathsWithoutTags: () => OpenAPIV3.PathsObject<{}, {}>;
    getTags: () => {
        name: string | null;
        description: string | null;
    }[];
    getFilteredTags: () => {
        name: string | null;
        description: string | null;
    }[];
};
