import type { OpenAPIV3 } from '@scalar/openapi-types';
import type { PlaygroundSecurityScheme } from '../../types';
export interface IOARequest {
    baseUrl?: string;
    path?: string;
    url: URL;
    method: OpenAPIV3.HttpMethods;
    parameters?: OpenAPIV3.ParameterObject[];
    authorizations?: PlaygroundSecurityScheme | PlaygroundSecurityScheme[];
    body?: any;
    variables?: Record<string, string>;
    headers: Record<string, string>;
    query: Record<string, string>;
    contentType?: string;
    cookies?: Record<string, string>;
}
export declare class OARequest {
    readonly baseUrl: string | undefined;
    readonly path: string | undefined;
    readonly url: URL;
    readonly method: OpenAPIV3.HttpMethods;
    readonly parameters: OpenAPIV3.ParameterObject[] | undefined;
    readonly authorizations: PlaygroundSecurityScheme | PlaygroundSecurityScheme[] | undefined;
    readonly body: any | undefined;
    readonly variables: Record<string, any>;
    readonly headers: Record<string, string>;
    readonly query: Record<string, string>;
    readonly contentType: string | undefined;
    readonly cookies: Record<string, string>;
    constructor({ baseUrl, path, url, method, parameters, authorizations, body, variables, headers, query, contentType, cookies, }: IOARequest);
}
